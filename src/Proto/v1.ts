/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: v1.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace grpc.reflection.v1 {
    export class ServerReflectionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({
            host?: string;
        } & (({
            fileByFilename?: string;
            fileContainingSymbol?: never;
            fileContainingExtension?: never;
            allExtensionNumbersOfType?: never;
            listServices?: never;
        } | {
            fileByFilename?: never;
            fileContainingSymbol?: string;
            fileContainingExtension?: never;
            allExtensionNumbersOfType?: never;
            listServices?: never;
        } | {
            fileByFilename?: never;
            fileContainingSymbol?: never;
            fileContainingExtension?: ExtensionRequest;
            allExtensionNumbersOfType?: never;
            listServices?: never;
        } | {
            fileByFilename?: never;
            fileContainingSymbol?: never;
            fileContainingExtension?: never;
            allExtensionNumbersOfType?: string;
            listServices?: never;
        } | {
            fileByFilename?: never;
            fileContainingSymbol?: never;
            fileContainingExtension?: never;
            allExtensionNumbersOfType?: never;
            listServices?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("fileByFilename" in data && data.fileByFilename != undefined) {
                    this.fileByFilename = data.fileByFilename;
                }
                if ("fileContainingSymbol" in data && data.fileContainingSymbol != undefined) {
                    this.fileContainingSymbol = data.fileContainingSymbol;
                }
                if ("fileContainingExtension" in data && data.fileContainingExtension != undefined) {
                    this.fileContainingExtension = data.fileContainingExtension;
                }
                if ("allExtensionNumbersOfType" in data && data.allExtensionNumbersOfType != undefined) {
                    this.allExtensionNumbersOfType = data.allExtensionNumbersOfType;
                }
                if ("listServices" in data && data.listServices != undefined) {
                    this.listServices = data.listServices;
                }
            }
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get fileByFilename() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set fileByFilename(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get hasFileByFilename() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get fileContainingSymbol() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set fileContainingSymbol(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get hasFileContainingSymbol() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get fileContainingExtension() {
            return pb_1.Message.getWrapperField(this, ExtensionRequest, 5) as ExtensionRequest;
        }
        set fileContainingExtension(value: ExtensionRequest) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get hasFileContainingExtension() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get allExtensionNumbersOfType() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set allExtensionNumbersOfType(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get hasAllExtensionNumbersOfType() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get listServices() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set listServices(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
        }
        get hasListServices() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get message_request() {
            const cases: {
                [index: number]: "none" | "fileByFilename" | "fileContainingSymbol" | "fileContainingExtension" | "allExtensionNumbersOfType" | "listServices";
            } = {
                0: "none",
                3: "fileByFilename",
                4: "fileContainingSymbol",
                5: "fileContainingExtension",
                6: "allExtensionNumbersOfType",
                7: "listServices"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            host?: string;
            fileByFilename?: string;
            fileContainingSymbol?: string;
            fileContainingExtension?: ReturnType<typeof ExtensionRequest.prototype.toObject>;
            allExtensionNumbersOfType?: string;
            listServices?: string;
        }): ServerReflectionRequest {
            const message = new ServerReflectionRequest({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.fileByFilename != null) {
                message.fileByFilename = data.fileByFilename;
            }
            if (data.fileContainingSymbol != null) {
                message.fileContainingSymbol = data.fileContainingSymbol;
            }
            if (data.fileContainingExtension != null) {
                message.fileContainingExtension = ExtensionRequest.fromObject(data.fileContainingExtension);
            }
            if (data.allExtensionNumbersOfType != null) {
                message.allExtensionNumbersOfType = data.allExtensionNumbersOfType;
            }
            if (data.listServices != null) {
                message.listServices = data.listServices;
            }
            return message;
        }
        toObject() {
            const data: {
                host?: string;
                fileByFilename?: string;
                fileContainingSymbol?: string;
                fileContainingExtension?: ReturnType<typeof ExtensionRequest.prototype.toObject>;
                allExtensionNumbersOfType?: string;
                listServices?: string;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.fileByFilename != null) {
                data.fileByFilename = this.fileByFilename;
            }
            if (this.fileContainingSymbol != null) {
                data.fileContainingSymbol = this.fileContainingSymbol;
            }
            if (this.fileContainingExtension != null) {
                data.fileContainingExtension = this.fileContainingExtension.toObject();
            }
            if (this.allExtensionNumbersOfType != null) {
                data.allExtensionNumbersOfType = this.allExtensionNumbersOfType;
            }
            if (this.listServices != null) {
                data.listServices = this.listServices;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeString(1, this.host);
            if (this.hasFileByFilename)
                writer.writeString(3, this.fileByFilename);
            if (this.hasFileContainingSymbol)
                writer.writeString(4, this.fileContainingSymbol);
            if (this.hasFileContainingExtension)
                writer.writeMessage(5, this.fileContainingExtension, () => this.fileContainingExtension.serialize(writer));
            if (this.hasAllExtensionNumbersOfType)
                writer.writeString(6, this.allExtensionNumbersOfType);
            if (this.hasListServices)
                writer.writeString(7, this.listServices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerReflectionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerReflectionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 3:
                        message.fileByFilename = reader.readString();
                        break;
                    case 4:
                        message.fileContainingSymbol = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.fileContainingExtension, () => message.fileContainingExtension = ExtensionRequest.deserialize(reader));
                        break;
                    case 6:
                        message.allExtensionNumbersOfType = reader.readString();
                        break;
                    case 7:
                        message.listServices = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerReflectionRequest {
            return ServerReflectionRequest.deserialize(bytes);
        }
    }
    export class ExtensionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            containingType?: string;
            extensionNumber?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("containingType" in data && data.containingType != undefined) {
                    this.containingType = data.containingType;
                }
                if ("extensionNumber" in data && data.extensionNumber != undefined) {
                    this.extensionNumber = data.extensionNumber;
                }
            }
        }
        get containingType() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set containingType(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get extensionNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set extensionNumber(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            containingType?: string;
            extensionNumber?: number;
        }): ExtensionRequest {
            const message = new ExtensionRequest({});
            if (data.containingType != null) {
                message.containingType = data.containingType;
            }
            if (data.extensionNumber != null) {
                message.extensionNumber = data.extensionNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                containingType?: string;
                extensionNumber?: number;
            } = {};
            if (this.containingType != null) {
                data.containingType = this.containingType;
            }
            if (this.extensionNumber != null) {
                data.extensionNumber = this.extensionNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.containingType.length)
                writer.writeString(1, this.containingType);
            if (this.extensionNumber != 0)
                writer.writeInt32(2, this.extensionNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtensionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtensionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.containingType = reader.readString();
                        break;
                    case 2:
                        message.extensionNumber = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExtensionRequest {
            return ExtensionRequest.deserialize(bytes);
        }
    }
    export class ServerReflectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5, 6, 7]];
        constructor(data?: any[] | ({
            validHost?: string;
            originalRequest?: ServerReflectionRequest;
        } & (({
            fileDescriptorResponse?: FileDescriptorResponse;
            allExtensionNumbersResponse?: never;
            listServicesResponse?: never;
            errorResponse?: never;
        } | {
            fileDescriptorResponse?: never;
            allExtensionNumbersResponse?: ExtensionNumberResponse;
            listServicesResponse?: never;
            errorResponse?: never;
        } | {
            fileDescriptorResponse?: never;
            allExtensionNumbersResponse?: never;
            listServicesResponse?: ListServiceResponse;
            errorResponse?: never;
        } | {
            fileDescriptorResponse?: never;
            allExtensionNumbersResponse?: never;
            listServicesResponse?: never;
            errorResponse?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validHost" in data && data.validHost != undefined) {
                    this.validHost = data.validHost;
                }
                if ("originalRequest" in data && data.originalRequest != undefined) {
                    this.originalRequest = data.originalRequest;
                }
                if ("fileDescriptorResponse" in data && data.fileDescriptorResponse != undefined) {
                    this.fileDescriptorResponse = data.fileDescriptorResponse;
                }
                if ("allExtensionNumbersResponse" in data && data.allExtensionNumbersResponse != undefined) {
                    this.allExtensionNumbersResponse = data.allExtensionNumbersResponse;
                }
                if ("listServicesResponse" in data && data.listServicesResponse != undefined) {
                    this.listServicesResponse = data.listServicesResponse;
                }
                if ("errorResponse" in data && data.errorResponse != undefined) {
                    this.errorResponse = data.errorResponse;
                }
            }
        }
        get validHost() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validHost(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get originalRequest() {
            return pb_1.Message.getWrapperField(this, ServerReflectionRequest, 2) as ServerReflectionRequest;
        }
        set originalRequest(value: ServerReflectionRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasOriginalRequest() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get fileDescriptorResponse() {
            return pb_1.Message.getWrapperField(this, FileDescriptorResponse, 4) as FileDescriptorResponse;
        }
        set fileDescriptorResponse(value: FileDescriptorResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get hasFileDescriptorResponse() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get allExtensionNumbersResponse() {
            return pb_1.Message.getWrapperField(this, ExtensionNumberResponse, 5) as ExtensionNumberResponse;
        }
        set allExtensionNumbersResponse(value: ExtensionNumberResponse) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get hasAllExtensionNumbersResponse() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get listServicesResponse() {
            return pb_1.Message.getWrapperField(this, ListServiceResponse, 6) as ListServiceResponse;
        }
        set listServicesResponse(value: ListServiceResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get hasListServicesResponse() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get errorResponse() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 7) as ErrorResponse;
        }
        set errorResponse(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get hasErrorResponse() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get message_response() {
            const cases: {
                [index: number]: "none" | "fileDescriptorResponse" | "allExtensionNumbersResponse" | "listServicesResponse" | "errorResponse";
            } = {
                0: "none",
                4: "fileDescriptorResponse",
                5: "allExtensionNumbersResponse",
                6: "listServicesResponse",
                7: "errorResponse"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7])];
        }
        static fromObject(data: {
            validHost?: string;
            originalRequest?: ReturnType<typeof ServerReflectionRequest.prototype.toObject>;
            fileDescriptorResponse?: ReturnType<typeof FileDescriptorResponse.prototype.toObject>;
            allExtensionNumbersResponse?: ReturnType<typeof ExtensionNumberResponse.prototype.toObject>;
            listServicesResponse?: ReturnType<typeof ListServiceResponse.prototype.toObject>;
            errorResponse?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): ServerReflectionResponse {
            const message = new ServerReflectionResponse({});
            if (data.validHost != null) {
                message.validHost = data.validHost;
            }
            if (data.originalRequest != null) {
                message.originalRequest = ServerReflectionRequest.fromObject(data.originalRequest);
            }
            if (data.fileDescriptorResponse != null) {
                message.fileDescriptorResponse = FileDescriptorResponse.fromObject(data.fileDescriptorResponse);
            }
            if (data.allExtensionNumbersResponse != null) {
                message.allExtensionNumbersResponse = ExtensionNumberResponse.fromObject(data.allExtensionNumbersResponse);
            }
            if (data.listServicesResponse != null) {
                message.listServicesResponse = ListServiceResponse.fromObject(data.listServicesResponse);
            }
            if (data.errorResponse != null) {
                message.errorResponse = ErrorResponse.fromObject(data.errorResponse);
            }
            return message;
        }
        toObject() {
            const data: {
                validHost?: string;
                originalRequest?: ReturnType<typeof ServerReflectionRequest.prototype.toObject>;
                fileDescriptorResponse?: ReturnType<typeof FileDescriptorResponse.prototype.toObject>;
                allExtensionNumbersResponse?: ReturnType<typeof ExtensionNumberResponse.prototype.toObject>;
                listServicesResponse?: ReturnType<typeof ListServiceResponse.prototype.toObject>;
                errorResponse?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.validHost != null) {
                data.validHost = this.validHost;
            }
            if (this.originalRequest != null) {
                data.originalRequest = this.originalRequest.toObject();
            }
            if (this.fileDescriptorResponse != null) {
                data.fileDescriptorResponse = this.fileDescriptorResponse.toObject();
            }
            if (this.allExtensionNumbersResponse != null) {
                data.allExtensionNumbersResponse = this.allExtensionNumbersResponse.toObject();
            }
            if (this.listServicesResponse != null) {
                data.listServicesResponse = this.listServicesResponse.toObject();
            }
            if (this.errorResponse != null) {
                data.errorResponse = this.errorResponse.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validHost.length)
                writer.writeString(1, this.validHost);
            if (this.hasOriginalRequest)
                writer.writeMessage(2, this.originalRequest, () => this.originalRequest.serialize(writer));
            if (this.hasFileDescriptorResponse)
                writer.writeMessage(4, this.fileDescriptorResponse, () => this.fileDescriptorResponse.serialize(writer));
            if (this.hasAllExtensionNumbersResponse)
                writer.writeMessage(5, this.allExtensionNumbersResponse, () => this.allExtensionNumbersResponse.serialize(writer));
            if (this.hasListServicesResponse)
                writer.writeMessage(6, this.listServicesResponse, () => this.listServicesResponse.serialize(writer));
            if (this.hasErrorResponse)
                writer.writeMessage(7, this.errorResponse, () => this.errorResponse.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerReflectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerReflectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validHost = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.originalRequest, () => message.originalRequest = ServerReflectionRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.fileDescriptorResponse, () => message.fileDescriptorResponse = FileDescriptorResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.allExtensionNumbersResponse, () => message.allExtensionNumbersResponse = ExtensionNumberResponse.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.listServicesResponse, () => message.listServicesResponse = ListServiceResponse.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.errorResponse, () => message.errorResponse = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerReflectionResponse {
            return ServerReflectionResponse.deserialize(bytes);
        }
    }
    export class FileDescriptorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fileDescriptorProto?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fileDescriptorProto" in data && data.fileDescriptorProto != undefined) {
                    this.fileDescriptorProto = data.fileDescriptorProto;
                }
            }
        }
        get fileDescriptorProto() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set fileDescriptorProto(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            fileDescriptorProto?: Uint8Array[];
        }): FileDescriptorResponse {
            const message = new FileDescriptorResponse({});
            if (data.fileDescriptorProto != null) {
                message.fileDescriptorProto = data.fileDescriptorProto;
            }
            return message;
        }
        toObject() {
            const data: {
                fileDescriptorProto?: Uint8Array[];
            } = {};
            if (this.fileDescriptorProto != null) {
                data.fileDescriptorProto = this.fileDescriptorProto;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fileDescriptorProto.length)
                writer.writeRepeatedBytes(1, this.fileDescriptorProto);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileDescriptorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileDescriptorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileDescriptorResponse {
            return FileDescriptorResponse.deserialize(bytes);
        }
    }
    export class ExtensionNumberResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            baseTypeName?: string;
            extensionNumber?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("baseTypeName" in data && data.baseTypeName != undefined) {
                    this.baseTypeName = data.baseTypeName;
                }
                if ("extensionNumber" in data && data.extensionNumber != undefined) {
                    this.extensionNumber = data.extensionNumber;
                }
            }
        }
        get baseTypeName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set baseTypeName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get extensionNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set extensionNumber(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            baseTypeName?: string;
            extensionNumber?: number[];
        }): ExtensionNumberResponse {
            const message = new ExtensionNumberResponse({});
            if (data.baseTypeName != null) {
                message.baseTypeName = data.baseTypeName;
            }
            if (data.extensionNumber != null) {
                message.extensionNumber = data.extensionNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                baseTypeName?: string;
                extensionNumber?: number[];
            } = {};
            if (this.baseTypeName != null) {
                data.baseTypeName = this.baseTypeName;
            }
            if (this.extensionNumber != null) {
                data.extensionNumber = this.extensionNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.baseTypeName.length)
                writer.writeString(1, this.baseTypeName);
            if (this.extensionNumber.length)
                writer.writePackedInt32(2, this.extensionNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtensionNumberResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtensionNumberResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.baseTypeName = reader.readString();
                        break;
                    case 2:
                        message.extensionNumber = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExtensionNumberResponse {
            return ExtensionNumberResponse.deserialize(bytes);
        }
    }
    export class ListServiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service?: ServiceResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
            }
        }
        get service() {
            return pb_1.Message.getRepeatedWrapperField(this, ServiceResponse, 1) as ServiceResponse[];
        }
        set service(value: ServiceResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            service?: ReturnType<typeof ServiceResponse.prototype.toObject>[];
        }): ListServiceResponse {
            const message = new ListServiceResponse({});
            if (data.service != null) {
                message.service = data.service.map(item => ServiceResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                service?: ReturnType<typeof ServiceResponse.prototype.toObject>[];
            } = {};
            if (this.service != null) {
                data.service = this.service.map((item: ServiceResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service.length)
                writer.writeRepeatedMessage(1, this.service, (item: ServiceResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ServiceResponse.deserialize(reader), ServiceResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServiceResponse {
            return ListServiceResponse.deserialize(bytes);
        }
    }
    export class ServiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): ServiceResponse {
            const message = new ServiceResponse({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceResponse {
            return ServiceResponse.deserialize(bytes);
        }
    }
    export class ErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errorCode?: number;
            errorMessage?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errorCode" in data && data.errorCode != undefined) {
                    this.errorCode = data.errorCode;
                }
                if ("errorMessage" in data && data.errorMessage != undefined) {
                    this.errorMessage = data.errorMessage;
                }
            }
        }
        get errorCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set errorCode(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get errorMessage() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set errorMessage(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            errorCode?: number;
            errorMessage?: string;
        }): ErrorResponse {
            const message = new ErrorResponse({});
            if (data.errorCode != null) {
                message.errorCode = data.errorCode;
            }
            if (data.errorMessage != null) {
                message.errorMessage = data.errorMessage;
            }
            return message;
        }
        toObject() {
            const data: {
                errorCode?: number;
                errorMessage?: string;
            } = {};
            if (this.errorCode != null) {
                data.errorCode = this.errorCode;
            }
            if (this.errorMessage != null) {
                data.errorMessage = this.errorMessage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errorCode != 0)
                writer.writeInt32(1, this.errorCode);
            if (this.errorMessage.length)
                writer.writeString(2, this.errorMessage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errorCode = reader.readInt32();
                        break;
                    case 2:
                        message.errorMessage = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorResponse {
            return ErrorResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServerReflectionService {
        static definition = {
            ServerReflectionInfo: {
                path: "/grpc.reflection.v1.ServerReflection/ServerReflectionInfo",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: ServerReflectionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ServerReflectionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ServerReflectionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ServerReflectionResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ServerReflectionInfo(call: grpc_1.ServerDuplexStream<ServerReflectionRequest, ServerReflectionResponse>): void;
    }
    export class ServerReflectionClient extends grpc_1.makeGenericClientConstructor(UnimplementedServerReflectionService.definition, "ServerReflection", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ServerReflectionInfo: GrpcChunkServiceInterface<ServerReflectionRequest, ServerReflectionResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<ServerReflectionRequest, ServerReflectionResponse> => {
            return super.ServerReflectionInfo(metadata, options);
        };
    }
}
